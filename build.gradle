buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java'
    id 'scala'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'com.github.sherter.google-java-format' version '0.9'

    id "com.github.johnrengelman.shadow" version "4.0.4"
    id 'io.codearte.nexus-staging' version '0.30.0'
}

googleJavaFormat {
    toolVersion = '1.7' // Java 8 compatible version
}

apply plugin: 'project-report'


group 'io.tiledb'
version '0.2.0'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    mavenLocal()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation group: 'io.tiledb', name: 'tiledb-cloud-java', version: '0.1.0'
}

test {
    useJUnitPlatform()
}

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'openapi-java-client'
            from components.java
        }
    }
}

task execute(type:JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}


import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
}

task checkFormat(type: VerifyGoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
    ignoreFailures false
}

tasks.shadowJar.configure {
    classifier = null
}

tasks.jar.configure {
    classifier = 'default'
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
}


sourceSets {
    main.java.srcDirs = ['src/main/java']
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives shadowJar
    archives sourceJar
    archives javadocJar
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact shadowJar
            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'TileDB Cloud JDBC'
                description = 'The JDBC client for the TileDB Cloud Service'
                url = 'https://github.com/TileDB-Inc/TileDB-Cloud-JDBC'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/TileDB-Inc/TileDB-Cloud-JDBC/blob/master/LICENSE'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/TileDB-Inc/TileDB-Cloud-Java.git'
                    developerConnection = 'scm:git:ssh://git@github.com/TileDB-Inc/TileDB-Cloud-Java'
                    url = 'https://github.com/TileDB-Inc/TileDB-Cloud-Java'
                }
                developers {
                    developer {
                        name = 'TileDB, Inc'
                        email = 'help@tiledb.io'
                        organization = 'TileDB, Inc.'
                        organizationUrl = 'https://tiledb.com/'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME')
                password System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}